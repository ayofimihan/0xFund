{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\nimport \"./PriceConverter.sol\";\n//Get funds from users\n//withdraw funds\n//set a minimum funding value\n\n//custom errors are stated outside of the contracts\nerror FundMe__Brokie();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n    //minimum ethUSD value that can be sent to the contract\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    //an array of all funders\n    address[] public funders;\n    //a mapping of all funder addresses to amount they funded.\n    mapping(address => uint256) public funderToAmount;\n    //use immutable on a constructor variable name that doesn't change.\n    address public immutable i_owner;\n    AggregatorV3Interface public priceFeed;\n\n    //constructor to set the owner when deploying the contract. the \"i_\" shows immutability which is on the variable name during declaration.\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n      receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    //a modi fier that checks to make sure the person about to call a function is the owner of the contract\n    modifier onlyOwner() {\n        require(i_owner == msg.sender, \"you're not the owner dawg\");\n        _;\n    }\n\n    //function to fund the contract\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n            \"get your money up\"\n        );\n        funders.push(msg.sender);\n        funderToAmount[msg.sender] = msg.value;\n    }\n\n    //function to withdraw from the contract only by the owner.\n    function withdraw(address _to) public onlyOwner {\n        for (\n            uint256 funderIndex = 0;\n            funderIndex < funders.length;\n            funderIndex++\n        ) {\n            address funder = funders[funderIndex];\n            funderToAmount[funder] = 0;\n        }\n        funders = new address[](0);\n        //this line withdraws the funds to the _to address\n        (bool success, ) = payable(_to).call{value: address(this).balance}(\"\");\n        //revert is used here to save gas and error brokie is declared already outside of the contract\n        if (!success) {\n            revert FundMe__Brokie();\n        }\n    }\n\n    // function cheaperWithdraw(address _to) public onlyOwner{\n    //                 address[] memory m_funders = funders;\n\n    //         //mappings cant be in memory\n    //         for(\n    //         uint256 funderIndex = 0;\n    //         funderIndex < m_funders.length;\n    //         funderIndex++){\n    //             address funder = funders[funderIndex];\n    //             funderToAmount [funder] = 0;\n    //         }\n\n    //         (bool success,) = payable(_to).call{value: address(this).balance}(\"\");\n    //         require(success);\n\n        \n\n    // }\n\n  \n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n//the math here is weird even though i understand\nlibrary PriceConverter {\n    //get the price from the chainlink datafeed\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        (, int price, , , ) = priceFeed.latestRoundData();\n        //Eth in terms of USD\n        // convert this price 3000.00000000 to msg.value(1^18)\n        //also consider the decimal so multiply by 1e10\n        //also wrap in uint256 to typecast price cos price is int and msg.value is uint\n\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n\n    function getVersion() internal view returns (uint256) {\n        return\n            AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e)\n                .version();\n\n        //simplified this to that-->\n        // AggregatorV3Interface aggversion = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\n        // return aggversion.version();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}